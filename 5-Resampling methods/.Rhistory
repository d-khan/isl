p_2 = predict(model_2,data=test)
error_2 = p_2-test[['mpg']]
rmse_2 = sqrt(mean(error_2^2))
model_3 = lm(mpg~poly(horsepower,3),data=training)
p_3 = predict(model_3,data=test)
error_3 = p_3-test[['mpg']]
rmse_3 = sqrt(mean(error_3^2))
emse_1
rmse_1
rmse_2
rmse_3
library(ISLR)
rmse.vector = rep(0,5)
attach(Auto)
set.seed(1)
row.names(Auto) = sample(nrow(Auto))
#Reset row numbers
row.names(Auto) = NULL
#50 split in training and test sets
split = round(nrow(Auto)*0.50)
training = Auto[1:split,]
test = Auto[(split+1):nrow(Auto),]
model_1 = lm(mpg~horsepower,data=training)
p_1 = predict(model_1,data=test)
error_1 = p_1-test[['mpg']]
rmse_1 = mean(error_1^2)
model_2 = lm(mpg~poly(horsepower,2),data=training)
p_2 = predict(model_2,data=test)
error_2 = p_2-test[['mpg']]
rmse_2 = mean(error_2^2)
model_3 = lm(mpg~poly(horsepower,3),data=training)
p_3 = predict(model_3,data=test)
error_3 = p_3-test[['mpg']]
rmse_3 = mean(error_3^2)
rmse_1
rmse_2
rmse_3
model <- train(
mpg ~ horsepower, Auto,
method = "lm",
trControl = trainControl(
method = "cv", number = 10,
verboseIter = TRUE
)
)
model
library(ISLR)
rmse.vector = rep(0,5)
attach(Auto)
set.seed(1)
row.names(Auto) = sample(nrow(Auto))
#Reset row numbers
row.names(Auto) = NULL
#50 split in training and test sets
split = round(nrow(Auto)*0.50)
training = Auto[1:split,]
test = Auto[(split+1):nrow(Auto),]
model_1 = lm(mpg~horsepower,data=training)
p_1 = predict(model_1,data=test)
error_1 = p_1-test[['mpg']]
rmse_1 = sqrt(mean(error_1^2))
model_2 = lm(mpg~poly(horsepower,2),data=training)
p_2 = predict(model_2,data=test)
error_2 = p_2-test[['mpg']]
rmse_2 = sqrt(mean(error_2^2))
model_3 = lm(mpg~poly(horsepower,3),data=training)
p_3 = predict(model_3,data=test)
error_3 = p_3-test[['mpg']]
rmse_3 = sqrt(mean(error_3^2))
rmse_1
model <- train(
mpg ~ horsepower, Auto,
method = "lm",
trControl = trainControl(
method = "cv", number = 10,p=0.5,
verboseIter = TRUE
)
)
model
model <- train(
mpg ~ horsepower, Auto,
method = "lm",
trControl = trainControl(
method = "cv", number = 10,
verboseIter = TRUE
)
)
model
rmse_1
rmse_2
set.seed(1)
glm.fit = glm(mpg~horsepower,data=Auto)
cv.error = cv.glm(Auto,glm.fit,K=10)$delta[1]
library(boot)
set.seed(1)
glm.fit = glm(mpg~horsepower,data=Auto)
cv.error = cv.glm(Auto,glm.fit,K=10)$delta[1]
cv.error
cv.glm
cv.error
sqrt(cv.error)
set.seed(1)
model <- train(
mpg ~ horsepower, Auto,
method = "lm",
trControl = trainControl(
method = "cv", number = 10,
verboseIter = TRUE
)
)
model
model_1
rmse_1
cv.error
model
cv.error
set.seed(1)
glm.fit = glm(mpg~poly(horsepower,2),data=Auto)
cv.error = cv.glm(Auto,glm.fit,K=10)$delta[1]
cv.error
sqrt(19.14)
sqrt(24.15)
# Load the Libraries
library(ISLR)
library(caret)
data(Auto)
head(Auto)
set.seed(100)
#Create a stratified random sample and partition the data
inTraining <- createDataPartition(Auto$horsepower, p = .75, list = FALSE)
training <- Auto[ inTraining,]
testing <- Auto[-inTraining,]
#Perform the 10 fold Cross Validation
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
set.seed(825)
degree <- 1:5
RSquared <- rep(0,5)
RMSE <- rep(0,5)
#Train the model using Polynomial Linear Regression
for ( d in degree)
{
LinearRegressor <- train(mpg ~ poly(horsepower,d), data = training,method = "lm",trControl = fitControl)
RSquared[d] <- LinearRegressor$results$Rsquared
RMSE[d]<- LinearRegressor$results$RMSE
}
library(ggplot2)
Degree.RegParams = data.frame(degree,RSquared,RMSE)
ggplot(aes(x = degree,y = RSquared),data = Degree.RegParams) +
geom_line()
ggplot(aes(x = degree,y = RMSE),data = Degree.RegParams) +
geom_line()
library(boot)
library(ISLR)
set.seed(1)
glm.fit = glm(mpg~horsepower,data=Auto)
cv.error = cv.glm(Auto,glm.fit)
cv.error
cv.error$call
cv.error$delta
cv.error
cv.error$K
cv.error$seed
set.seed(1)
model <- train(
mpg ~ horsepower, Auto,
method = 'lm',
trControl = trainControl(
method = "cv", number = 1,
verboseIter = TRUE
)
)
model
set.seed(1)
model <- train(
mpg ~ horsepower, Auto,
method = 'lm',
trControl = trainControl(
method = "cv", number = 1,
verboseIter = TRUE
)
)
set.seed(1)
model <- train(
mpg ~ horsepower, Auto,
method = 'lm',
trControl = trainControl(
method = "LOOCV",
verboseIter = TRUE
)
)
model
nrow(Auto)
swrt(24.23)
sqrt(24.23)
model.list = as.list(rep(0,5))
model.list[[1]]
set.seed(1)
library(ISLR)
library(caret)
set.seed(1)
model.list = as.list(rep(0,5))
for (i in 1:5) {
model.list[i] <- train(
mpg ~ poly(horsepower,i), Auto,
method = 'lm',
trControl = trainControl(
method = "LOOCV",
verboseIter = FALSE
)
)
model.list[i]
}
model.list[1]
model.list[2]
model.list[6]
model.list[[1]]
model.list[1] <- train(
mpg ~ poly(horsepower,i), Auto,
method = 'lm',
trControl = trainControl(
method = "LOOCV",
verboseIter = FALSE
)
)
model.list[1] <- train(
mpg ~ poly(horsepower,2), Auto,
method = 'lm',
trControl = trainControl(
method = "LOOCV",
verboseIter = FALSE
)
)
model.list[1]
model <- train(
mpg ~ poly(horsepower,2), Auto,
method = 'lm',
trControl = trainControl(
method = "LOOCV",
verboseIter = FALSE
)
)
model
model$results
x = as.list(model$results)
x
x[1]
set.seed(1)
model.list = as.list(rep(0,5))
for (i in 1:5) {
model <- train(
mpg ~ poly(horsepower,2), Auto,
method = 'lm',
trControl = trainControl(
method = "LOOCV",
verboseIter = FALSE
)
)
model.list[i] = model$results
}
model.list[1]
model.list[2]
model.list[[3]
]
model[1]
model.list[1]
model.list[2]
model.list[3]
model.list[4]
model.list[5]
model.list[6]
model$results
class(model$results)
temp = data.frame
class(temp)
temp = as.data.frame()
rm(temp)
temp = as.data.frame(temp)
as.data.frame(temp)
temp
temp = data.frame()
temp = rbind(model$results)
temp
library(ISLR)
library(caret)
set.seed(1)
temp = data.frame()
for (i in 1:5) {
model <- train(
mpg ~ poly(horsepower,2), Auto,
method = 'lm',
trControl = trainControl(
method = "LOOCV",
verboseIter = FALSE
)
)
temp = rbind(model$results)
}
temp
set.seed(1)
library(ISLR)
library(caret)
set.seed(1)
temp = data.frame()
for (i in 1:5) {
model <- train(
mpg ~ poly(horsepower,2), Auto,
method = 'lm',
trControl = trainControl(
method = "LOOCV",
verboseIter = FALSE
)
)
temp = rbind(temp,model$results)
}
temp
library(ISLR)
library(caret)
set.seed(1)
temp = data.frame()
for (i in 1:5) {
model <- train(
mpg ~ poly(horsepower,i), Auto,
method = 'lm',
trControl = trainControl(
method = "LOOCV",
verboseIter = FALSE
)
)
temp = rbind(temp,model$results)
}
set.seed(1)
temp = data.frame()
for (i in 1:5) {
model <- train(
mpg ~ poly(horsepower,i), Auto,
method = 'lm',
trControl = trainControl(
method = "LOOCV",
verboseIter = TRUE
)
)
temp = rbind(temp,model$results)
}
set.seed(1)
temp = data.frame()
for (i in 1:5) {
model <- train(
mpg ~ poly(horsepower,i), Auto,
method = 'lm',
trControl = trainControl(
method = "LOOCV",
verboseIter = TRUE
)
)
#temp = rbind(temp,model$results)
}
set.seed(1)
temp = data.frame()
for (i in 1:5) {
model <- train(
mpg ~ poly(horsepower,1), Auto,
method = 'lm',
trControl = trainControl(
method = "LOOCV",
verboseIter = TRUE
)
)
#temp = rbind(temp,model$results)
}
model$results
set.seed(1)
temp = data.frame()
for (i in 1:5) {
model <- train(
mpg ~ poly(horsepower,2), Auto,
method = 'lm',
trControl = trainControl(
method = "LOOCV",
verboseIter = TRUE
)
)
#temp = rbind(temp,model$results)
}
model$results
temp = data.frame()
for (i in 1:5) {
model <- train(
mpg ~ poly(horsepower,i), Auto,
method = 'lm',
trControl = trainControl(
method = "LOOCV",
verboseIter = TRUE
)
)
#temp = rbind(temp,model$results)
}
set.seed(1)
model.list = as.list(rep(0,5))
for (i in 1:5) {
model.list[i] <- train(
mpg ~ poly(horsepower,i), Auto,
method = 'lm',
trControl = trainControl(
method = "cv",number=10,
verboseIter = FALSE
)
)
#model.list[[i]]
}
set.seed(1)
model.list = as.list(rep(0,5))
for (i in 1:5) {
model.list <- train(
mpg ~ poly(horsepower,i), Auto,
method = 'lm',
trControl = trainControl(
method = "cv",number=10,
verboseIter = FALSE
)
)
#model.list[[i]]
}
set.seed(1)
model.list = as.list(rep(0,5))
#for (i in 1:5) {
model.list <- train(
mpg ~ poly(horsepower,3), Auto,
method = 'lm',
trControl = trainControl(
method = "cv",number=10,
verboseIter = FALSE
)
)
#model.list[[i]]
#}
model.list
set.seed(1)
model.list = as.list(rep(0,5))
#for (i in 1:5) {
model.list <- train(
mpg ~ poly(horsepower,3), Auto,
method = 'lm',
trControl = trainControl(
method = "cv",number=392,
verboseIter = FALSE
)
)
#model.list[[i]]
#}
model.list
set.seed(1)
model.list = as.list(rep(0,5))
#for (i in 1:5) {
model.list <- train(
mpg ~ poly(horsepower,3), Auto,
method = 'lm',
trControl = trainControl(
method = "cv",number=10,
verboseIter = FALSE
)
)
#model.list[[i]]
#}
model.list
model.list = as.list(rep(0,5))
#for (i in 1:5) {
model.list <- train(
mpg ~ poly(horsepower,2), Auto,
method = 'lm',
trControl = trainControl(
method = "cv",number=10,
verboseIter = FALSE
)
)
#model.list[[i]]
model.list
model.list$results
set.seed(1)
model.list = as.list(rep(0,5))
for (i in 1:5) {
model.list <- train(
mpg ~ poly(horsepower,i), Auto,
method = 'lm',
trControl = trainControl(
method = "cv",number=10,
verboseIter = FALSE
)
)
#model.list[[i]]
}
set.seed(1)
model.list <- train(
mpg ~ poly(horsepower,2), Auto,
method = 'lm',
trControl = trainControl(
method = "boot",
verboseIter = FALSE
)
)
model.list$results
model.list
model.list$method
model.list$modelInfo
model.list$modelType
model.list$pred
model.list$results
model.list$bestTune
setwd("~/Desktop/isl/5-Resampling methods")
